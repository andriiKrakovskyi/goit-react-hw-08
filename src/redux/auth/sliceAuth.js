import { createSlice } from '@reduxjs/toolkit';
import {
  registerThunk,
  loginThunk,
  logoutThunk,
  refreshUserThunk,
} from './operationsAuth';

const initialState = {
  user: {
    name: null,
    email: null,
  },
  token: null,
  isLoggedIn: false,
  isRefreshing: false,
};

const authSlice = createSlice({
  name: 'authNameSlice', //–∏–º—è slice
  initialState,
  extraReducers: (builder) => {
    //! registerThunk
    builder
      .addCase(registerThunk.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.isLoggedIn = true;
      })
      //! loginThunk
      .addCase(loginThunk.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.isLoggedIn = true;
      })
      //! logoutThunk
      // –ö–æ–≥–¥–∞ logoutThunk —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux –¥–ª—è —ç—Ç–æ–≥–æ
      // slice —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (initialState),
      //  –æ—á–∏—â–∞—è –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–∫–µ–Ω—ã –∏ —Ç. –¥.
      // .addCase(logoutThunk.fulfilled, () => initialState)

      .addCase(logoutThunk.fulfilled, (state) => {
        state.user = { name: null, email: null };
        state.token = null;
        state.isLoggedIn = false;
        state.isRefreshing = false;
      })

      //! refreshUserThunk
      .addCase(refreshUserThunk.pending, (state) => {
        state.isRefreshing = true;
      })
      .addCase(refreshUserThunk.fulfilled, (state, action) => {
        state.user = action.payload;
        state.isLoggedIn = true;
        state.isRefreshing = false;
      })

      .addCase(refreshUserThunk.rejected, (state) => {
        state.isRefreshing = false;
      });
  },
});

export const authReducer = authSlice.reducer;

//! ==========================================================================
//!üî• –¢—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è async thunk
//* –ö–æ–≥–¥–∞ createAsyncThunk –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
//* pending - –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω.
//* fulfilled - –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.
//* rejected - –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.

//!  1. pending - –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
// üîπ –ö–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç?
// üëâ –ö–∞–∫ —Ç–æ–ª—å–∫–æ dispatch(loginThunk(credentials)) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è,
//    Redux –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ pending.

//üîπ  –ß—Ç–æ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞—é—Ç –≤ pending?
//‚úÖ  –í–∫–ª—é—á–∞—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
//    state.loading = true;
//‚úÖ  –û—á–∏—â–∞—é—Ç –ø—Ä–æ—à–ª—ã–µ –æ—à–∏–±–∫–∏.
//    state.error = null;

//!  2. fulfilled - —É—Å–ø–µ—Ö
// üîπ –ö–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç?
// üëâ –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª
//    –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ).

// üîπ –ß—Ç–æ –¥–µ–ª–∞—é—Ç –≤ fulfilled?
// ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—é—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–∫–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
//    state.user = action.payload.user;
//    state.token = action.payload.token;
// ‚úÖ –í—ã–∫–ª—é—á–∞—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
//    state.loading = false;

//!  3. rejected - –æ—à–∏–±–∫–∞
// üîπ –ö–æ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç?
// üëâ –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, —Å–±–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ).

// üîπ –ß—Ç–æ –¥–µ–ª–∞—é—Ç –≤ rejected?
// ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞—é—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
//    state.error = action.payload;
// ‚úÖ –í—ã–∫–ª—é—á–∞—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
//    state.loading = false;
